!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class o{static setup(){o.peerConnStack=new Array(0),o.activeConn=0,void 0!==window.Peer&&(o.peerjs=window.Peer),n.KikuAudioStream.setup(),n.KikuAudioStream.listenForStart(o.onStartRecording)}static connectToServer(e,t,r,n){o.myname=e,o.serverAddr=t,o.serverPort=r,o.serverPath=n;let i={host:o.serverAddr,port:o.serverPort,path:o.serverPath};o.peer=new o.peerjs(o.myname,i),o.peer.on("connection",e=>{o.onConnectionCallback(e),e.on("data",t=>{o.onDataCallback(e,t)})})}static connectToDevice(e){let t=o.peer.connect(e);t.on("open",()=>{t.on("data",e=>{o.onDataCallback(t,e)})}),o.peerConnStack.push(t)}static sendEmptyResponse(e){let t=o.findIndexOfDevice(e);if(-1!==t){let e=new a(c.REQUEST_EMPTY_RESPONSE);o.peerConnStack[t].open?(o.ourNetworkTime=o.currentTime(),i.sendData(o.peerConnStack[t],e)):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!")}static async startRecording(e,t){o.currentMaster=!0,o.inRecordingFlight=!0,o.activeConn=o.findIndexOfDevice(e);let r=performance.timeOrigin+performance.now()+t,s=o.findIndexOfDevice(e);if(-1!==s){let e=new a(c.REQUEST_RECORD,r);console.log("Sending start record message",e),o.peerConnStack[s].open?i.sendData(o.peerConnStack[s],e):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!");let d=await n.KikuAudioStream.recordAt(r,o.recordDuration);return o.ourBuffer=d,o.currentMaster=!1,new Promise((e,t)=>{setTimeout(()=>{if(o.inRecordingFlight)t("Recording was still in flight and was not transfered back to this device in time");else{let t={currentDeviceBuffer:o.ourBuffer,requestedDeviceBuffer:o.theirBuffer,recordingDelay:o.recordingDelayTime,networkDelay:o.networkDelayTime};e(t)}},o.flightAllowanceTime)})}static sendRecordedBuffer(e,t){let r=o.findIndexOfDevice(e);if(-1!==r){let e=new a(c.RESPONSE_RECORD,o.currentTime(),t);o.peerConnStack[r].open?i.sendData(o.peerConnStack[r],e):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!")}static onStartRecording(){if(!0!==o.currentMaster){console.log("onStartRecording entering send message"),o.ourRecordingStart=o.currentTime();let e=new a(c.STARTED_RECORDING);o.peerConnStack[o.activeConn].open?(console.log("Sending message of start recording",e),i.sendData(o.peerConnStack[o.activeConn],e)):console.warn("Connection to peer was not open to send the data via!")}}static setReturnAllowance(e){o.flightAllowanceTime=e}static deleteUnusedConnections(){for(let e=0;e<o.peerConnStack.length;e++)o.peerConnStack[e].open||o.peerConnStack.splice(e,1)}static findIndexOfDevice(e){for(var t=0;t<o.peerConnStack.length;t++)if(o.peerConnStack[t].peer===e)return t;return-1}static onDataCallback(e,t){switch(console.log("message received:",t),t.type){case c.REQUEST_EMPTY_RESPONSE:let r=new a(c.RESPONSE_EMPTY_RESPONSE);o.ourNetworkTime=o.currentTime(),i.sendData(e,r);break;case c.REQUEST_RECORD:console.log("Asked to start recording..."),n.KikuAudioStream.recordAt(t.timeStamp,o.recordDuration).then(t=>{console.log("Successfully completed recording!"),this.sendRecordedBuffer(e.peer,t)});break;case c.STARTED_RECORDING:o.theirRecordingStart=o.currentTime(),o.updateRecordingDelayTime();break;case c.RESPONSE_EMPTY_RESPONSE:o.theirNetworkTime=o.currentTime(),o.updateNetworkDelayTime();break;case c.RESPONSE_RECORD:o.theirBuffer=t.audioBuffer,o.inRecordingFlight=!1}}static onConnectionCallback(e){console.log("Connection received!",e),o.peerConnStack.push(e)}static onOpenCallback(){console.log("Connection open!")}static currentTime(){return performance.timing.navigationStart+performance.now()}static updateNetworkDelayTime(){o.ourNetworkTime=o.ourNetworkTime||performance.now(),o.theirNetworkTime=o.theirNetworkTime||o.ourNetworkTime,o.networkDelayTime=Math.abs(o.ourNetworkTime-o.theirNetworkTime)/2}static updateRecordingDelayTime(){o.recordingDelayTime=Math.abs(o.ourRecordingStart-o.theirRecordingStart)/2}}o.activeConn=0,o.flightAllowanceTime=1e3,o.networkDelayTime=10,o.recordingDelayTime=0,o.ourRecordingStart=o.currentTime(),o.theirRecordingStart=o.currentTime(),o.recordDuration=2500,o.buffersReady=!1,o.ourBuffer=new Float32Array(1),o.theirBuffer=new Float32Array(1),o.inRecordingFlight=!1,o.currentMaster=!1;class i{static sendData(e,t){let r={type:t.type,timeStamp:t.timeStamp||"",audioBuffer:t.audioBuffer||""};e._open?e.send(r):console.warn("Tried to send message when connection is closed!",r)}}class a{constructor(e,t,r){this.type=e,this.timeStamp=t,this.audioBuffer=r}toObject(){return{messageType:this.type,timeStamp:this.timeStamp||[],audioBuffer:this.audioBuffer||[]}}}var c;!function(e){e.REQUEST_RECORD="requestRecord",e.RESPONSE_RECORD="responseRecord",e.STARTED_RECORDING="startedRecording",e.STOPPED_RECORDING="stoppedRecording",e.REQUEST_EMPTY_RESPONSE="requestEmptyResponse",e.RESPONSE_EMPTY_RESPONSE="responseEmptyResponse"}(c||(c={})),window.Kiku=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{static setup(){n.audioContext=new AudioContext||window.webkitAudioContext(),navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?(console.log("getUserMedia supported."),navigator.mediaDevices.getUserMedia({audio:{mandatory:{googEchoCancellation:"false",googAutoGainControl:"false",googNoiseSuppression:"false",googHighpassFilter:"false"},optional:[]}}).then(function(e){n.setupStream(e)}).catch(function(e){console.warn("The following getUserMedia error occured: "+e)})):console.warn("getUserMedia not supported on your browser!")}static listenForStart(e){this.startedRecording=e}static listenForEnd(e){this.finishedRecording=e}static float32bufferConcat(e,t){let r=e.length,n=new Float32Array(r+t.length);return n.set(e),n.set(t,r),n}static setupStream(e){n.supported=!0,this.micRecorder=new MediaRecorder(e),n.scriptNode=n.audioContext.createScriptProcessor(1024,1,1),n.mediaStreamSourceNode=n.audioContext.createMediaStreamSource(e),n.scriptNode.onaudioprocess=function(e){n.isRecording?n.activeBuffer=n.float32bufferConcat(n.activeBuffer,e.inputBuffer.getChannelData(0)):!0===n.resetAudioBuffer&&(n.activeBuffer=new Float32Array(1),n.resetAudioBuffer=!1)},n.mediaStreamSourceNode.connect(n.scriptNode),n.scriptNode.connect(n.audioContext.destination)}static async recordAt(e,t){let r=e-n.currentTime();console.log("Starting to record in "+r+" from now ("+r/1e3+")");return await(()=>new Promise(e=>{setTimeout(()=>{n.record(t).then(t=>{e(t)})},r)}))()}static record(e){return new Promise(t=>{n.isRecording=!0,n.startedRecording(),setTimeout(()=>{n.isRecording=!1,n.recordedBuffer=n.activeBuffer,t(n.recordedBuffer)},e)})}static recording(){return n.isRecording}static getLastRecordedBuffer(){return n.recordedBuffer}static currentTime(){return performance.timing.navigationStart+performance.now()}}n.isRecording=!1,n.activeBuffer=new Float32Array(1),n.recordedBuffer=new Float32Array(1),n.startedRecording=(()=>{}),n.finishedRecording=(()=>{}),n.audioContext=new AudioContext,n.supported=!1,n.resetAudioBuffer=!1,t.KikuAudioStream=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,