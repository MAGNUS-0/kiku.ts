!function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=r(1);class n{static setup(){n.peerConnStack=new Array(0),n.activeConn=0,void 0!==window.Peer&&(n.peerjs=window.Peer),o.KikuAudioStream.setup(),o.KikuAudioStream.listenForStart(n.onStartRecording)}static connectToServer(e,t,r,o,i){n.myname=e,n.serverAddr=t,n.serverPort=r,n.serverPath=o,void 0===i&&(i=!1);let a={host:n.serverAddr,port:n.serverPort,path:n.serverPath,secure:i};n.peer=new n.peerjs(n.myname,a),n.peer.on("connection",e=>{n.onConnectionCallback(e),e.on("data",t=>{n.onDataCallback(e,t)})})}static connectToDevice(e){let t=n.peer.connect(e);t.on("open",()=>{t.on("data",e=>{n.onDataCallback(t,e)})}),n.peerConnStack.push(t)}static sendEmptyResponse(e){let t=n.findIndexOfDevice(e);if(-1!==t){let e=new a(c.REQUEST_EMPTY_RESPONSE);n.peerConnStack[t].open?(n.ourNetworkTime=n.currentTime(),i.sendData(n.peerConnStack[t],e)):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!")}static async startRecording(e,t,r){void 0!==r&&(n.flightAllowanceTime=r),n.currentMaster=!0,n.inRecordingFlight=!0,n.activeConn=n.findIndexOfDevice(e);let s=performance.timeOrigin+performance.now()+t,d=n.findIndexOfDevice(e);if(-1!==d){let e=new a(c.REQUEST_RECORD,s);console.log("Sending start record message",e),n.peerConnStack[d].open?i.sendData(n.peerConnStack[d],e):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!");let u=await o.KikuAudioStream.recordAt(s,n.recordDuration);return n.ourBuffer=u,n.currentMaster=!1,new Promise((e,t)=>{setTimeout(()=>{if(n.inRecordingFlight)t("Recording was still in flight and was not transfered back to this device in time");else{let t={currentDeviceBuffer:n.ourBuffer,requestedDeviceBuffer:n.theirBuffer,recordingDelay:n.recordingDelayTime,networkDelay:n.networkDelayTime};e(t)}},n.flightAllowanceTime)})}static sendRecordedBuffer(e,t){let r=n.findIndexOfDevice(e);if(-1!==r){let e=new a(c.RESPONSE_RECORD,n.currentTime(),t);n.peerConnStack[r].open?i.sendData(n.peerConnStack[r],e):console.warn("Connection to peer was not open to send the data via!")}else console.warn("No peer with that ID was found in the active connection stack!")}static onStartRecording(){if(!0!==n.currentMaster){console.log("onStartRecording entering send message");let e=new a(c.STARTED_RECORDING);n.peerConnStack[n.activeConn].open?(n.ourRecordingStart=n.currentTime(),console.log("Sending message of start recording",e),i.sendData(n.peerConnStack[n.activeConn],e)):console.warn("Connection to peer was not open to send the data via!")}}static setReturnAllowance(e){n.flightAllowanceTime=e}static deleteUnusedConnections(){for(let e=0;e<n.peerConnStack.length;e++)n.peerConnStack[e].open||n.peerConnStack.splice(e,1)}static findIndexOfDevice(e){for(var t=0;t<n.peerConnStack.length;t++)if(n.peerConnStack[t].peer===e)return t;return-1}static onDataCallback(e,t){switch(console.log("message received:",t),t.type){case c.REQUEST_EMPTY_RESPONSE:let r=new a(c.RESPONSE_EMPTY_RESPONSE);n.ourNetworkTime=n.currentTime(),i.sendData(e,r);break;case c.REQUEST_RECORD:console.log("Asked to start recording..."),o.KikuAudioStream.recordAt(t.timeStamp,n.recordDuration).then(t=>{console.log("Successfully completed recording!"),this.sendRecordedBuffer(e.peer,t)});break;case c.STARTED_RECORDING:console.log("Started recording message received, updating recording offset..."),n.theirRecordingStart=n.currentTime(),n.updateRecordingDelayTime();break;case c.RESPONSE_EMPTY_RESPONSE:n.theirNetworkTime=n.currentTime(),n.updateNetworkDelayTime();break;case c.RESPONSE_RECORD:n.theirBuffer=t.audioBuffer,n.inRecordingFlight=!1}}static onConnectionCallback(e){console.log("Connection received!",e),n.peerConnStack.push(e)}static onOpenCallback(){console.log("Connection open!")}static currentTime(){return performance.timing.navigationStart+performance.now()}static updateNetworkDelayTime(){n.ourNetworkTime=n.ourNetworkTime||performance.now(),n.theirNetworkTime=n.theirNetworkTime||n.ourNetworkTime,n.networkDelayTime=Math.abs(n.ourNetworkTime-n.theirNetworkTime)/2}static updateRecordingDelayTime(){n.recordingDelayTime=Math.abs(n.ourRecordingStart-n.theirRecordingStart)/2e3,console.log("Recording offset updated to: "+n.recordingDelayTime)}}n.activeConn=0,n.flightAllowanceTime=1e3,n.networkDelayTime=10,n.recordingDelayTime=0,n.ourRecordingStart=n.currentTime(),n.theirRecordingStart=n.ourRecordingStart,n.recordDuration=1e3,n.buffersReady=!1,n.ourBuffer=new Float32Array(1),n.theirBuffer=new Float32Array(1),n.inRecordingFlight=!1,n.currentMaster=!1;class i{static sendData(e,t){let r={type:t.type,timeStamp:t.timeStamp||"",audioBuffer:t.audioBuffer||""};e._open?e.send(r):console.warn("Tried to send message when connection is closed!",r)}}class a{constructor(e,t,r){this.type=e,this.timeStamp=t,this.audioBuffer=r}toObject(){return{messageType:this.type,timeStamp:this.timeStamp||[],audioBuffer:this.audioBuffer||[]}}}var c;!function(e){e.REQUEST_RECORD="requestRecord",e.RESPONSE_RECORD="responseRecord",e.STARTED_RECORDING="startedRecording",e.STOPPED_RECORDING="stoppedRecording",e.REQUEST_EMPTY_RESPONSE="requestEmptyResponse",e.RESPONSE_EMPTY_RESPONSE="responseEmptyResponse"}(c||(c={})),window.Kiku=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o{static setup(){o.audioContext=new AudioContext||window.webkitAudioContext(),navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?(console.log("getUserMedia supported."),navigator.mediaDevices.getUserMedia({audio:{mandatory:{googEchoCancellation:"false",googAutoGainControl:"false",googNoiseSuppression:"false",googHighpassFilter:"false"},optional:[]}}).then(function(e){o.setupStream(e)}).catch(function(e){console.warn("The following getUserMedia error occured: "+e)})):console.warn("getUserMedia not supported on your browser!")}static listenForStart(e){this.startedRecording=e}static listenForEnd(e){this.finishedRecording=e}static float32bufferConcat(e,t){let r=e.length,o=new Float32Array(r+t.length);return o.set(e),o.set(t,r),o}static setupStream(e){o.supported=!0,this.micRecorder=new MediaRecorder(e),o.scriptNode=o.audioContext.createScriptProcessor(1024,1,1),o.mediaStreamSourceNode=o.audioContext.createMediaStreamSource(e),o.scriptNode.onaudioprocess=function(e){o.isRecording?o.activeBuffer=o.float32bufferConcat(o.activeBuffer,e.inputBuffer.getChannelData(0)):!0===o.resetAudioBuffer&&(o.activeBuffer=new Float32Array(1),o.resetAudioBuffer=!1)},o.mediaStreamSourceNode.connect(o.scriptNode),o.scriptNode.connect(o.audioContext.destination)}static async recordAt(e,t){o.clearAudioBuffer();let r=e-o.currentTime();console.log("Starting to record in "+r+" from now ("+r/1e3+")");return await(()=>new Promise(e=>{setTimeout(()=>{o.record(t).then(t=>{e(t)})},r)}))()}static record(e){return new Promise(t=>{o.isRecording=!0,o.startedRecording(),setTimeout(()=>{o.isRecording=!1,o.recordedBuffer=o.activeBuffer,t(o.recordedBuffer)},e)})}static recording(){return o.isRecording}static getLastRecordedBuffer(){return o.recordedBuffer}static currentTime(){return performance.timing.navigationStart+performance.now()}static clearAudioBuffer(){o.resetAudioBuffer=!0}}o.isRecording=!1,o.activeBuffer=new Float32Array(1),o.recordedBuffer=new Float32Array(1),o.startedRecording=(()=>{}),o.finishedRecording=(()=>{}),o.audioContext=new AudioContext,o.supported=!1,o.resetAudioBuffer=!1,t.KikuAudioStream=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,